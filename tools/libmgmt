#!/usr/bin/env python3
###############################################################################
# Description: Library maintenance tool for Blade Runner Insight
# Author:      Tor Inge Skaar
# License:     MIT
###############################################################################

# Core modules
import os
import textwrap
from datetime import datetime
from shutil import copyfile
from glob import glob

# Third party modules
from docopt import docopt
from bs4 import BeautifulSoup
from wand.image import Image
from sumy.parsers.html import HtmlParser
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer as Summarizer
from sumy.nlp.stemmers import Stemmer
from sumy.utils import get_stop_words
import pymmd

usage = """
Usage:
    library list
    library add ARTICLES...
    library reindex

Options:
    -h --help   Show this help description

"""


# Add article by transform markdown source to html and apply template
def add(articlelist, library):
    for article in articlelist:
        apath = library + '/' + article
        mdfile = apath + '/article.md'

        if not os.path.isfile(mdfile):
            print('Warning: {} not found'.format(mdfile))
            continue

        # Load article from markdown source
        with open(mdfile, 'r') as mdfp:
            md = mdfp.read()
        mdtitle = pymmd.value(md, 'title')
        mdauthor = pymmd.value(md, 'author')
        mdimgauthor = pymmd.value(md, 'cauthor')
        mdhtml = pymmd.convert(md, ext=pymmd.SNIPPET+pymmd.NOTES)
        article = BeautifulSoup(mdhtml, 'html.parser')

        # Load html template
        path = library + '/../assets/templates/article.html'
        template = BeautifulSoup(open(path), 'html.parser')

        # Prefix some elements
        pagetitle = 'Blade Runner Insight - ' + mdtitle
        author = 'By ' + mdauthor
        cover = ''
        if len(mdimgauthor) != 0 :
            cover = 'Image artwork by ' + mdimgauthor

        # Modify template
        template.title.contents[0].replace_with(pagetitle)
        template.section.header.h2.contents[0].replace_with(mdtitle)
        template.section.header.div.p.contents[0].replace_with(author)
        cyear = template.find('section', {'id': 'footer'}).ul.li.span
        cyear.contents[0].replace_with(str(datetime.now().year))
        acontent = template.find('section', {'id': 'wrapper'}). \
                            find('div', {'class': 'wrapper'}).div
        # Add artwork author
        cover_tag = article.new_tag('div', id='imgauthor')
        cover_tag.string = cover
        article.append(cover_tag)

        # Insert article into main template
        acontent.contents[0].replace_with(article)

        # Save article html 
        html = template.prettify('utf-8')
        with open(apath + '/index.html', 'wb') as fp:
            fp.write(html)

        # Add local CSS to article
        csstemplate = library + '/../assets/templates/article.css'
        copyfile(csstemplate, apath + '/article.css')

        # Create cropped version of cover art
        coverimg = apath + '/cover.jpg'
        cropimg = apath + '/cover-crop.jpg'
        if not os.path.isfile(coverimg):
            print('Warning: {} not found'.format(coverimg))
            continue
        cthumb = Image(filename=coverimg)
        cthumb.crop(width=505, height=295, gravity='center')
        cthumb.save(filename=cropimg)


# Rebuild Libary index page
def reindex(library):

    # Get library template 
    path = library + '/../assets/templates/library.html'
    libtemp = BeautifulSoup(open(path), 'html.parser')

    for apath in glob(library+'/*/'):

        # Read article markdown
        mdfile = apath + '/article.md'
        with open(mdfile, 'r') as mdfp:
            md = mdfp.read()
        mdtitle = pymmd.value(md, 'title')
        print(mdtitle)

        # Auto-summarize article
        lang = 'english'
        mdhtml = pymmd.convert(md, ext=pymmd.SNIPPET+pymmd.NOTES)
        parser = HtmlParser.from_string(mdhtml, None, Tokenizer(lang))
        stemmer = Stemmer(lang)
        summarizer = Summarizer(stemmer)
        summarizer.stop_words = get_stop_words(lang)
        summary = ''.join(map(str, summarizer(parser.document, 5)))

        # Create new block of tags
        adir = os.path.basename(os.path.normpath(apath))
        ahref = adir + '/index.html'
        alink = libtemp.new_tag('a', href=ahref, **{'class':'image'})
        aimg = libtemp.new_tag('img', src=adir+'/cover-crop.jpg', alt='')
        atitle = libtemp.new_tag('h3', **{'class':'major'})
        atitle.string = mdtitle
        asum = libtemp.new_tag('p')
        asum.string = summary[:160].rsplit(' ', 1)[0]
        aread = libtemp.new_tag('a', href=ahref, **{'class':'special'})
        ablock = libtemp.new_tag('article')
        print(asum.string)
        exit()

def main():

    # Argument parser
    args = docopt(usage)

    # We need to know the path of the library of articles
    library = os.environ.get('BRILIB')
    if library is None:
        print("Environment variable 'BRILIB' is not set. Please set it to the "
              "current path of the directory containing all articles")
        exit(2)

    # List all articles
    if args['list']:
        print('\n'.join(os.listdir(library)))
        exit()

    # Prep article
    if args['add']:
        if args['ARTICLES'][0] == 'all':
            add(os.listdir(library), library)
        else:
            add(args['ARTICLES'], library)

    # Rebuild library index
    if args['reindex']:
        reindex(library)

if __name__ == "__main__":
    main()

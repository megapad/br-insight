#!/usr/bin/env python3
###############################################################################
# Description: Library maintenance tool for Blade Runner Insight
# Author:      Tor Inge Skaar
# License:     MIT
###############################################################################

# Core modules
import os
from datetime import datetime
from shutil import copyfile

# Third party modules
from docopt import docopt
from bs4 import BeautifulSoup
import pymmd

usage = """
Usage:
    library list
    library prep ARTICLES...

Options:
    -h --help   Show this help description

"""


# Load a spesific template file and return a html5lib xml.etree instance
def load_template(filename, library):
    path = library + '/../assets/templates/'
    return BeautifulSoup(open(path + filename), 'html.parser')

# Transform markdown source to html and apply template
def prep(articlelist, library):
    for article in articlelist:
        apath = library + '/' + article + '/'
        mdfile = apath + '/article.md'

        if not os.path.isfile(mdfile):
            print('Warning: {}Â not found'.format(mdfile))
            continue

        # Load article from markdown source
        with open(mdfile, 'r') as mdfp:
            md = mdfp.read()
        mdtitle = pymmd.value(md, 'title')
        mdauthor = pymmd.value(md, 'author')
        mdhtml = pymmd.convert(md, ext=pymmd.SNIPPET)
        article = BeautifulSoup(mdhtml, 'html.parser')

        # Load html template
        template = load_template('article.html', library)

        # Prefix some elements
        pagetitle = 'Blade Runner Insight - ' + mdtitle
        author = 'By ' + mdauthor

        # Modify template
        template.title.contents[0].replace_with(pagetitle)
        template.section.header.h2.contents[0].replace_with(mdtitle)
        template.section.header.div.p.contents[0].replace_with(author)
        cyear = template.find('section', {'id': 'footer'}).ul.li.span
        cyear.contents[0].replace_with(str(datetime.now().year))
        acontent = template.find('section', {'id': 'wrapper'}). \
                            find('div', {'class': 'wrapper'}).div
        acontent.contents[0].replace_with(article)

        # Save article html 
        html = template.prettify('utf-8')
        with open(apath + '/index.html', 'wb') as fp:
            fp.write(html)

        # Add local CSS to article
        csstemplate = library + '/../assets/templates/article.css'
        copyfile(csstemplate, apath + '/article.css')

def main():

    # Argument parser
    args = docopt(usage)

    # We need to know the path of the library of articles
    library = os.environ.get('BRILIB')
    if library is None:
        print("Environment variable 'BRILIB' is not set. Please set it to the "
              "current path of the directory containing all articles")
        exit(2)

    # List all articles
    if args['list']:
        print('\n'.join(os.listdir(library)))
        exit()

    # Prep article
    if args['prep']:
        if args['ARTICLES'][0] == 'all':
            prep(os.listdir(library), library)
        else:
            prep(args['ARTICLES'], library)

if __name__ == "__main__":
    main()
